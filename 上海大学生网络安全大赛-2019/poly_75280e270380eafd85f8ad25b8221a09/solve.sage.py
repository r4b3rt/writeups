

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0x0000bd94909c0e247c276ef6816797dd2b176337a430269f4f9df7ea14923a1a = Integer(0x0000bd94909c0e247c276ef6816797dd2b176337a430269f4f9df7ea14923a1a); _sage_const_47 = Integer(47); _sage_const_255 = Integer(255); _sage_const_256 = Integer(256); _sage_const_0 = Integer(0); _sage_const_143 = Integer(143); _sage_const_0x0000c1fef44fd4d870d00622e1f40779a2a83a64ab693c54780960b043d4d2ea = Integer(0x0000c1fef44fd4d870d00622e1f40779a2a83a64ab693c54780960b043d4d2ea); _sage_const_0xc1fef44fd4d870d00622e1f40779a2a83a64ab693c54780960b043d4d2ea = Integer(0xc1fef44fd4d870d00622e1f40779a2a83a64ab693c54780960b043d4d2ea); _sage_const_0xbd94909c0e247c276ef6816797dd2b176337a430269f4f9df7ea14923a1a = Integer(0xbd94909c0e247c276ef6816797dd2b176337a430269f4f9df7ea14923a1a)#!/usr/bin/env sage

P=PolynomialRing(GF(_sage_const_2 ),'x')
F = GF(_sage_const_2 )['x']; (x,) = F._first_ngens(1)
base = x**_sage_const_255 + x**_sage_const_143 + x**_sage_const_47  + x**_sage_const_3  + _sage_const_1 
FF = GF(_sage_const_2 **_sage_const_256 )

r1 = _sage_const_0xbd94909c0e247c276ef6816797dd2b176337a430269f4f9df7ea14923a1a 
r2 = _sage_const_0xc1fef44fd4d870d00622e1f40779a2a83a64ab693c54780960b043d4d2ea 
c1 = _sage_const_0x0000bd94909c0e247c276ef6816797dd2b176337a430269f4f9df7ea14923a1a 
c2 = _sage_const_0x0000c1fef44fd4d870d00622e1f40779a2a83a64ab693c54780960b043d4d2ea 

def getPoly(c):
	b = bin(c)[_sage_const_2 :].zfill(_sage_const_256 )[::-_sage_const_1 ]
	p = _sage_const_0 
	for i in range(_sage_const_256 ):
		if b[i] == '1':
			p += x**i
	return p

h1 = getPoly(c1)
h2 = getPoly(c2)
print h1
print h2

f1 = getPoly(r1)
f2 = getPoly(r2)
print f1
print f2

key_1 = (h1-h2)*inverse_mod((f1-f2),base)%base
key_2 = (h1-f1*key_1)%base
print key_1
print key_2


