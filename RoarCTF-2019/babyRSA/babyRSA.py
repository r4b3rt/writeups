import sympy
import random
import gmpy2
import libnum

#def myGetPrime():
#    A= getPrime(513)
#    print(A)
#    B=A-random.randint(1e3,1e5)
#    print(B)
#    return sympy.nextPrime((B!)%A)
#p=myGetPrime()

def calX(A,B):
    tmp=B+1
    res=1
    while tmp<A:
        res*=tmp
        res%=A
        tmp+=1
    return res

A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407
B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596
x1=calX(A1,B1)
x1_=gmpy2.invert(x1,A1)
factB1=-1*x1_%A1
p=sympy.nextprime(factB1)
print 'p =', p

#q=myGetPrime()
A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927
B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026
x2=calX(A2,B2)
x2_=gmpy2.invert(x2,A2)
factB2=-1*x2_%A2
q=sympy.nextprime(factB2)
print 'q =', q

#r=myGetPrime()

#n=p*q*r
n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733
r=n/p/q
print r
#c=pow(flag,e,n)
e=0x1001
c=65669738259956193152137899174049847462495016858239424115871354058526815000923451927138381917740393091388382103048930294669378204005488753858176168508082409402675645254753472158733328702151755559380642016251437844181309301474393977753462490799014770286934148130639135186607801014969040037522071972282801884880089523319028620671520971103365275848613335949197149661408042560524107114105126919377503270365243217821644517712076054602321987781198396807717434025338864
d=gmpy2.invert(e,(r-1)*(p-1)*(q-1))
print 'd =', d
m=gmpy2.powmod(c,d,n)
flag=libnum.n2s(m)
print flag
#so,what is the flag?
