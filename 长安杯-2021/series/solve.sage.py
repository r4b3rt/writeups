

# This file was *autogenerated* from the file ./solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_1292991588783542706506728336494377723983115217051171962646571511384590134899 = Integer(1292991588783542706506728336494377723983115217051171962646571511384590134899); _sage_const_229797522574801936576076488492034448896863980731763047709941641260180597290800402814069755381965565755866855389082787759443816945304000719176334587540293777658369250939545994974691382505993209963323032684771922094686136104097942892330051349688373437571196103392801691879287264056022383484359551333197 = Integer(229797522574801936576076488492034448896863980731763047709941641260180597290800402814069755381965565755866855389082787759443816945304000719176334587540293777658369250939545994974691382505993209963323032684771922094686136104097942892330051349688373437571196103392801691879287264056022383484359551333197); _sage_const_33285073849485750791903437807279991921 = Integer(33285073849485750791903437807279991921); _sage_const_38845988283830087557982578789883120419 = Integer(38845988283830087557982578789883120419); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_2021 = Integer(2021); _sage_const_4 = Integer(4)#!/usr/bin/env sage
from Crypto.Util.number import *
from gmpy2 import next_prime

def fastPow(M, x, n=None):
    if x==_sage_const_0 :
        return identity_matrix(len(M.columns()))
    if n!=None:
        res = fastPow(M, x//_sage_const_2 , n)
    else:
        res = fastPow(M, x//_sage_const_2 )
    if x%_sage_const_2  == _sage_const_1 :
        if n!=None:
            return res*res*M % n
        else:
            return res*res*M
    else:
        if n!=None:
            return res*res % n
        else:
            return res*res

e = _sage_const_1292991588783542706506728336494377723983115217051171962646571511384590134899 
c = _sage_const_229797522574801936576076488492034448896863980731763047709941641260180597290800402814069755381965565755866855389082787759443816945304000719176334587540293777658369250939545994974691382505993209963323032684771922094686136104097942892330051349688373437571196103392801691879287264056022383484359551333197 
# yafu!
ep = _sage_const_33285073849485750791903437807279991921 
eq = _sage_const_38845988283830087557982578789883120419 
assert ep*eq == e
phi = int((ep**_sage_const_2 -_sage_const_1 )*(eq**_sage_const_2 -_sage_const_1 ))
phi2 = int(euler_phi(ep+_sage_const_1 )*euler_phi(ep-_sage_const_1 )*euler_phi(eq+_sage_const_1 )*euler_phi(eq-_sage_const_1 ))  # euler_phi(phi)

one = matrix(ZZ, [_sage_const_1 , _sage_const_1 , _sage_const_1 ]).transpose()
Fme = matrix(IntegerModRing(e), [[_sage_const_1 , _sage_const_1 , _sage_const_1 ], [_sage_const_1 , _sage_const_0 , _sage_const_0 ], [_sage_const_0 , _sage_const_1 , _sage_const_0 ]])

def Fe(n, i=_sage_const_0 ):
  return int((Fme**n*Fme**(i-_sage_const_3 )*one)[_sage_const_0 ][_sage_const_0 ])%e

def Fe2(n, i=_sage_const_0 ):
  n = int(n)
  return int((Fme**pow(n, n, phi)*Fme**(i-_sage_const_3 )*one)[_sage_const_0 ][_sage_const_0 ])%e

def Fe3(m, n, i=_sage_const_0 ):
  m = int(m)
  n = int(n)
  return int((Fme**pow(m, pow(n, n, phi2), phi)*Fme**(i-_sage_const_3 )*one)[_sage_const_0 ][_sage_const_0 ])%e

s1 = reduce(lambda a, b: a*b, [Fe2(e, i) for i in range(_sage_const_1 , _sage_const_5 )])
s2 = Fe3(_sage_const_2021 , e)**_sage_const_4 
s = s1+s2
p = next_prime(s)
print('c = %s' % c)
print('p = %s' % p)

d = e.inverse_mod(p-_sage_const_1 )
m = pow(c, d, p)
print(long_to_bytes(int(m)))

