

# This file was *autogenerated* from the file coppersmith.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_179769313486231590772930519078879622636938643302225534782830469757312072683043631509515420460371558689969495356234291151237187401183904166468092527888038016548030997882577001018380034032688990171947934428361633212455892663120099715510300757263464214136154730101572820730916893268994804116455440971785992345443 = Integer(179769313486231590772930519078879622636938643302225534782830469757312072683043631509515420460371558689969495356234291151237187401183904166468092527888038016548030997882577001018380034032688990171947934428361633212455892663120099715510300757263464214136154730101572820730916893268994804116455440971785992345443); _sage_const_4 = Integer(4); _sage_const_42121870893450634577463914985889299119866228583627912396576170307551916037987547771260822964333183931568836770305094948800384063683438446157974528104607194 = Integer(42121870893450634577463914985889299119866228583627912396576170307551916037987547771260822964333183931568836770305094948800384063683438446157974528104607194); _sage_const_1024 = Integer(1024); _sage_const_564761954589225685790600357175654927630507102952458240533488436763726131946307269500484579650081638366712976866408828439929564233188458969845553726574072994626147918173387818392470889235452670343083910939718492107773926516940195616367841541551573034827861600615124882958291113530607621451878269031617025549171 = Integer(564761954589225685790600357175654927630507102952458240533488436763726131946307269500484579650081638366712976866408828439929564233188458969845553726574072994626147918173387818392470889235452670343083910939718492107773926516940195616367841541551573034827861600615124882958291113530607621451878269031617025549171); _sage_const_179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211 = Integer(179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211); _sage_const_200 = Integer(200); _sage_const_0p5 = RealNumber('0.5'); _sage_const_7 = Integer(7)
import time

debug = True

# display matrix picture with 0 and X
def matrix_overview(BB, bound):
    for ii in range(BB.dimensions()[_sage_const_0 ]):
        a = ('%02d ' % ii)
        for jj in range(BB.dimensions()[_sage_const_1 ]):
            a += '0' if BB[ii,jj] == _sage_const_0  else 'X'
            a += ' '
        if BB[ii, ii] >= bound:
            a += '~'
        print a

def coppersmith_howgrave_univariate(pol, modulus, beta, mm, tt, XX):
    """
    Coppersmith revisited by Howgrave-Graham
    
    finds a solution if:
    * b|modulus, b >= modulus^beta , 0 < beta <= 1
    * |x| < XX
    """
    #
    # init
    #
    dd = pol.degree()
    nn = dd * mm + tt

    #
    # checks
    #
    if not _sage_const_0  < beta <= _sage_const_1 :
        raise ValueError("beta should belongs in (0, 1]")

    if not pol.is_monic():
        raise ArithmeticError("Polynomial must be monic.")

    #
    # calculate bounds and display them
    #
    """
    * we want to find g(x) such that ||g(xX)|| <= b^m / sqrt(n)

    * we know LLL will give us a short vector v such that:
    ||v|| <= 2^((n - 1)/4) * det(L)^(1/n)

    * we will use that vector as a coefficient vector for our g(x)
    
    * so we want to satisfy:
    2^((n - 1)/4) * det(L)^(1/n) < N^(beta*m) / sqrt(n)
    
    so we can obtain ||v|| < N^(beta*m) / sqrt(n) <= b^m / sqrt(n)
    (it's important to use N because we might not know b)
    """
    if debug:
        # t optimized?
        print "\n# Optimized t?\n"
        print "we want X^(n-1) < N^(beta*m) so that each vector is helpful"
        cond1 = RR(XX**(nn-_sage_const_1 ))
        print "* X^(n-1) = ", cond1
        cond2 = pow(modulus, beta*mm)
        print "* N^(beta*m) = ", cond2
        print "* X^(n-1) < N^(beta*m) \n-> GOOD" if cond1 < cond2 else "* X^(n-1) >= N^(beta*m) \n-> NOT GOOD"
        
        # bound for X
        print "\n# X bound respected?\n"
        print "we want X <= N^(((2*beta*m)/(n-1)) - ((delta*m*(m+1))/(n*(n-1)))) / 2 = M"
        print "* X =", XX
        cond2 = RR(modulus**(((_sage_const_2 *beta*mm)/(nn-_sage_const_1 )) - ((dd*mm*(mm+_sage_const_1 ))/(nn*(nn-_sage_const_1 )))) / _sage_const_2 )
        print "* M =", cond2
        print "* X <= M \n-> GOOD" if XX <= cond2 else "* X > M \n-> NOT GOOD"

        # solution possible?
        print "\n# Solutions possible?\n"
        detL = RR(modulus**(dd * mm * (mm + _sage_const_1 ) / _sage_const_2 ) * XX**(nn * (nn - _sage_const_1 ) / _sage_const_2 ))
        print "we can find a solution if 2^((n - 1)/4) * det(L)^(1/n) < N^(beta*m) / sqrt(n)"
        cond1 = RR(_sage_const_2 **((nn - _sage_const_1 )/_sage_const_4 ) * detL**(_sage_const_1 /nn))
        print "* 2^((n - 1)/4) * det(L)^(1/n) = ", cond1
        cond2 = RR(modulus**(beta*mm) / sqrt(nn))
        print "* N^(beta*m) / sqrt(n) = ", cond2
        print "* 2^((n - 1)/4) * det(L)^(1/n) < N^(beta*m) / sqrt(n) \n-> SOLUTION WILL BE FOUND" if cond1 < cond2 else "* 2^((n - 1)/4) * det(L)^(1/n) >= N^(beta*m) / sqroot(n) \n-> NO SOLUTIONS MIGHT BE FOUND (but we never know)"

        # warning about X
        print "\n# Note that no solutions will be found _for sure_ if you don't respect:\n* |root| < X \n* b >= modulus^beta\n"
    
    #
    # Coppersmith revisited algo for univariate
    #

    # change ring of pol and x
    polZ = pol.change_ring(ZZ)
    x = polZ.parent().gen()

    # compute polynomials
    gg = []
    for ii in range(mm):
        for jj in range(dd):
            gg.append((x * XX)**jj * modulus**(mm - ii) * polZ(x * XX)**ii)
    for ii in range(tt):
        gg.append((x * XX)**ii * polZ(x * XX)**mm)
    
    # construct lattice B
    BB = Matrix(ZZ, nn)

    for ii in range(nn):
        for jj in range(ii+_sage_const_1 ):
            BB[ii, jj] = gg[ii][jj]

    # display basis matrix
    if debug:
        matrix_overview(BB, modulus**mm)

    # LLL
    BB = BB.LLL()

    # transform shortest vector in polynomial    
    new_pol = _sage_const_0 
    for ii in range(nn):
        new_pol += x**ii * BB[_sage_const_0 , ii] / XX**ii

    # factor polynomial
    potential_roots = new_pol.roots()
    print "potential roots:", potential_roots

    # test roots
    roots = []
    for root in potential_roots:
        if root[_sage_const_0 ].is_integer():
            result = polZ(ZZ(root[_sage_const_0 ]))
            if gcd(modulus, result) >= modulus**beta:
                roots.append(ZZ(root[_sage_const_0 ]))

    # 
    return roots

############################################
# Test on Stereotyped Messages
##########################################    

print "//////////////////////////////////"
print "// TEST 1"
print "////////////////////////////////"

# RSA gen options (for the demo)
length_N = _sage_const_1024   # size of the modulus
Kbits = _sage_const_200       # size of the root
e = _sage_const_3 

# RSA gen (for the demo)
p = next_prime(_sage_const_2 **int(round(length_N/_sage_const_2 )))
q = next_prime(p)
N = _sage_const_179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639477074095512480796227391561801824887394139579933613278628104952355769470429079061808809522886423955917442317693387325171135071792698344550223571732405562649211  # p*q
ZmodN = Zmod(N);

# Create problem (for the demo)
K = ZZ.random_element(_sage_const_0 , _sage_const_2 **Kbits)
Kdigits = K.digits(_sage_const_2 )
M = [_sage_const_0 ]*Kbits + [_sage_const_1 ]*(length_N-Kbits); 
for i in range(len(Kdigits)):
    M[i] = Kdigits[i]
M = ZZ(M, _sage_const_2 )
C = _sage_const_179769313486231590772930519078879622636938643302225534782830469757312072683043631509515420460371558689969495356234291151237187401183904166468092527888038016548030997882577001018380034032688990171947934428361633212455892663120099715510300757263464214136154730101572820730916893268994804116455440971785992345443  # ZmodN(M)^e

# Problem to equation (default)
P = PolynomialRing(ZmodN, names=('x',)); (x,) = P._first_ngens(1)#, implementation='NTL')
pol = (_sage_const_2 **length_N - _sage_const_2 **Kbits + x)**e - C
dd = pol.degree()

# Tweak those
beta = _sage_const_1                                 # b = N
epsilon = beta / _sage_const_7                       # <= beta / 7
mm = ceil(beta**_sage_const_2  / (dd * epsilon))     # optimized value
tt = floor(dd * mm * ((_sage_const_1 /beta) - _sage_const_1 ))    # optimized value
XX = ceil(N**((beta**_sage_const_2 /dd) - epsilon))  # optimized value

# Coppersmith
start_time = time.time()
roots = coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)

# output
print "\n# Solutions"
print "we want to find:",str(K)
print "we found:", str(roots)
print("in: %s seconds " % (time.time() - start_time))
print "\n"

############################################
# Test on Factoring with High Bits Known
##########################################
print "//////////////////////////////////"
print "// TEST 2"
print "////////////////////////////////"

# RSA gen
length_N = _sage_const_1024 ;
p = next_prime(_sage_const_2 **int(round(length_N/_sage_const_2 )));
q = next_prime( round(pi.n()*p) );
N = _sage_const_564761954589225685790600357175654927630507102952458240533488436763726131946307269500484579650081638366712976866408828439929564233188458969845553726574072994626147918173387818392470889235452670343083910939718492107773926516940195616367841541551573034827861600615124882958291113530607621451878269031617025549171  # p*q;

# qbar is q + [hidden_size_random]
hidden = _sage_const_200 ;
diff = ZZ.random_element(_sage_const_0 , _sage_const_2 **hidden-_sage_const_1 )
qbar = _sage_const_42121870893450634577463914985889299119866228583627912396576170307551916037987547771260822964333183931568836770305094948800384063683438446157974528104607194  # q + diff; 

F = PolynomialRing(Zmod(N), implementation='NTL', names=('x',)); (x,) = F._first_ngens(1); 
pol = x - qbar
dd = pol.degree()

# PLAY WITH THOSE:
beta = _sage_const_0p5                              # we should have q >= N^beta
epsilon = beta / _sage_const_7                      # <= beta/7
mm = ceil(beta**_sage_const_2  / (dd * epsilon))    # optimized
tt = floor(dd * mm * ((_sage_const_1 /beta) - _sage_const_1 ))   # optimized
XX = ceil(N**((beta**_sage_const_2 /dd) - epsilon)) # we should have |diff| < X

# Coppersmith
start_time = time.time()
roots = coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)

# output
print "\n# Solutions"
print "we want to find:", qbar - q
print "we found:", roots
print("in: %s seconds " % (time.time() - start_time))

